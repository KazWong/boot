<launch>
  <arg name="output" default="log"/>
  <arg name="sim" default="false"/>
  <arg name="ur_ip" default="0.0.0.0"/>
  <arg name="joint_pub" default="false"/>

  <!-- UR Modern Driver -->
  <include unless="$(arg sim)" file="$(find ur_modern_driver)/launch/ur_common.launch">
    <arg name="prefix"  value="" />
    <arg name="robot_ip" value="$(arg ur_ip)"/>
    <arg name="min_payload"  value="0.0"/>
    <arg name="max_payload"  value="5.0"/>
    <arg name="base_frame" value="tool0_controller_base" />
    <arg name="tool_frame" value="tool0_controller" />
  </include>

  <!-- Simulation Driver -->
  <!-- ur_gazebo/controller_utils.launch -->
  <!-- ur_gazebo/ur5.launch -->
  
  <node if="$(arg sim)" pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />
  
  
  <!-- <arg name="tmp1" value="$(eval arg('sim') == true)"/>
  <arg name="tmp2" value="$(eval arg('joint_pub') == false)"/>
  <rosparam if="$(eval arg('tmp1') == arg('tmp2') == true)" file="$(find ur_gazebo)/controller/joint_state_controller.yaml" command="load"/>
  <node if="$(eval arg('tmp1') == arg('tmp2') == true)" name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/> -->
  <include if="$(arg sim)" file="$(find ur_gazebo)/launch/controller_utils.launch"/>
  
  
  <rosparam if="$(arg sim)" file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml"
            command="load"/>
  <node if="$(arg sim)" pkg="controller_manager" name="arm_controller_spawner"
        type="controller_manager" args="spawn arm_controller" respawn="false" output="$(arg output)"/>
        
  <node if="$(arg sim)" pkg="sim_setup" name="fake_ur_driver" type="fake_ur_driver"/>
  <node if="$(arg sim)" pkg="sim_setup" name="fake_io_broadcaster" type="fake_io_broadcaster"/>

  <!-- Trajectory Service -->
  <node pkg="simple_trajectory" name="simple_trajectory_srv" type="simple_trajectory_srv"           
        output="$(arg output)" >
    <rosparam unless="$(arg sim)" file="$(find simple_trajectory)/param/q1.yaml" command="load"/>
    <rosparam unless="$(arg sim)" file="$(find simple_trajectory)/param/q2.yaml" command="load"/>
    <rosparam unless="$(arg sim)" file="$(find simple_trajectory)/param/q3.yaml" command="load"/>
   
    <remap if="$(arg sim)" from="follow_joint_trajectory" 
           to="/arm_controller/follow_joint_trajectory"/>
    <rosparam if="$(arg sim)" file="$(find simple_trajectory)/param/q1_sim.yaml" command="load"/>
    <rosparam if="$(arg sim)" file="$(find simple_trajectory)/param/q2_sim.yaml" command="load"/>
    <rosparam if="$(arg sim)" file="$(find simple_trajectory)/param/q3_sim.yaml" command="load"/>
  </node>

  <node pkg="simple_trajectory" name="simple_trajectory_srv_ik" 
        type="simple_trajectory_srv_ik" output="$(arg output)">
    <remap if="$(arg sim)" from="follow_joint_trajectory" 
           to="arm_controller/follow_joint_trajectory"/>
  </node>
  <node pkg="simple_trajectory" name="simple_trajectory_srv_joint" 
        type="simple_trajectory_srv_joint"  output="$(arg output)">
    <remap if="$(arg sim)" from="follow_joint_trajectory" 
           to="arm_controller/follow_joint_trajectory"/>
  </node>
  <node pkg="simple_trajectory" name="simple_trajectory_srv_abs" 
        type="simple_trajectory_srv_abs" output="$(arg output)">
    <remap if="$(arg sim)" from="follow_joint_trajectory" 
           to="arm_controller/follow_joint_trajectory"/>
  </node>
</launch>
